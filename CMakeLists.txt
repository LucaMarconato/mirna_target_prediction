cmake_minimum_required(VERSION 3.6)
project(expression_profiles)
add_compile_options(-std=c++14 -Ofast)
# add_definitions("-std=c++14 -Wall -Wextra -Wpedantic -g -O0")

# add_definitions("-std=c++14 -Ofast")
# add_compile_options(-std=c++14 -Wall -g -O0)

set (VERSION_MAJOR 0)
set (VERSION_MINOR 0)
set (VERSION_RELEASE 0)
set (VERSION_BUILD 0)

SET(OMP_TEMPORARILY_DISABLED ON)
# ----OPENMP----
if(OMP_TEMPORARILY_DISABLED)
  message(STATUS "OpenMP disabled for Xcode")
  OPTION (USE_OpenMP "Use OpenMP to enamble <omp.h>" OFF)
else()
  message(STATUS "Using OpenMP")
  OPTION (USE_OpenMP "Use OpenMP to enamble <omp.h>" ON)
endif()
unset(OMP_TEMPORARILY_DISABLED)

# Find OpenMP
if(APPLE AND USE_OpenMP)
  set(QMAKE_CXXFLAGS "${QMAKE_CXXFLAGS}" -fopenmp)
  set(QMAKE_LFLAGS "${QMAKE_LFLAGS}" -fopenmp)
  set(CMAKE_C_COMPILER "/usr/local/Cellar/llvm/6.0.1/bin/clang")
  set(CMAKE_CXX_COMPILER "/usr/local/Cellar/llvm/6.0.1/bin/clang++")
  set(OPENMP_LIBRARIES "/usr/local/Cellar/llvm/6.0.1/lib")
  set(OPENMP_INCLUDES "/usr/local/Cellar/llvm/6.0.1/include")
    # if(CMAKE_C_COMPILER_ID MATCHES "Clang")
        set(OpenMP_C "${CMAKE_C_COMPILER}")
        set(OpenMP_C_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
        set(OpenMP_C_LIB_NAMES "libomp" "libgomp" "libiomp5")
        set(OpenMP_C_FLAGS "-fopenmp -Wno-unused-command-line-argument")
        set(OpenMP_C_LIB_NAMES "libomp" "libgomp" "libiomp5")
        set(OpenMP_libomp_LIBRARY ${OpenMP_C_LIB_NAMES})
        set(OpenMP_libgomp_LIBRARY ${OpenMP_C_LIB_NAMES})
        set(OpenMP_libiomp5_LIBRARY ${OpenMP_C_LIB_NAMES})
    # endif()
    if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
      set(OpenMP_CXX "${CMAKE_CXX_COMPILER}")
      set(OpenMP_CXX_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
      set(OpenMP_CXX_LIB_NAMES "libomp" "libgomp" "libiomp5")
      # set(OpenMP_CXX_FLAGS "-fopenmp -Wno-unused-command-line-argument")
      # set(OpenMP_CXX_LIB_NAMES "libomp" "libgomp" "libiomp5")      
      set(OpenMP_libomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
      set(OpenMP_libgomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
      set(OpenMP_libiomp5_LIBRARY ${OpenMP_CXX_LIB_NAMES})
    endif()
endif()

if(USE_OpenMP)
  find_package(OpenMP REQUIRED)
endif(USE_OpenMP)

if (OPENMP_FOUND)
    include_directories("${OPENMP_INCLUDES}")
    link_directories("${OPENMP_LIBRARIES}")
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif(OPENMP_FOUND)

# ----BOOST----
include_directories(./dependencies /usr/local/Cellar/boost/1.67.0_1/include)
link_directories(/usr/local/Cellar/boost/1.67.0_1/lib)
# --------
file(GLOB SOURCES ./*.cpp)
add_executable(expression_profiles ${SOURCES})
# ----BOOST----
set(BOOST_LIBRARIES -lboost_system -lboost_filesystem -lboost_serialization)
set(CMAKE_STATIC_LINKER_FLAGS ${BOOST_LIBRARIES})
set(CMAKE_SHARED_LINKER_FLAGS ${BOOST_LIBRARIES})
target_link_libraries(expression_profiles ${BOOST_LIBRARIES})
# --------
add_custom_target(run COMMAND sh run.sh)
